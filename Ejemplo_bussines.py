# -*- coding: utf-8 -*-
"""Bussines.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DIT9dYr2SlSwvveLw4IuYQ3jpBaw9EX5
"""

import pandas as pd

# Especifica la ruta y el nombre del archivo Excel
archivo_excel = '/content/HOY.xls'

# Lee el archivo Excel en un DataFrame de pandas
df = pd.read_excel(archivo_excel, sheet_name='HOY')  # Cambia 'Hoja1' al nombre de la hoja que desees leer




# Puedes acceder y manipular los datos en el DataFrame
print(df)

import pandas as pd

# Especifica la ruta y el nombre del archivo de texto
archivo_txt = 'HOY.txt'

# Lee el archivo de texto en un DataFrame de pandas
df = pd.read_csv(archivo_txt, delimiter=';')  # Cambia el delimitador si es necesario

# Puedes acceder y manipular los datos en el DataFrame
print(df)

grupos = df.groupby('Descripción')

# Itera a través de los grupos y realiza operaciones en cada grupo
for descripcion, grupo in grupos:
    print(f'Descripción: {descripcion}')
    print(grupo)

import pandas as pd
import matplotlib.pyplot as plt



# Usar groupby() para clasificar los datos por descripción
grupos = df.groupby('Year')

# Obtén la cantidad de elementos en cada grupo
conteo_por_grupo = grupos.size()

# Crea un gráfico de barras
conteo_por_grupo.plot(kind='bar')
plt.xlabel('Recibidor')
plt.ylabel('Cantidad')
plt.title('Cantidad por Descripción')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt



# Usar groupby() para clasificar los datos por descripción
grupos = df.groupby('Acomodador')

# Obtén la cantidad de elementos en cada grupo
conteo_por_grupo = grupos.size()

# Crea un gráfico de barras
conteo_por_grupo.plot(kind='bar')
plt.xlabel('Acomodador')
plt.ylabel('Cantidad')
plt.title('Cantidad por Descripción')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt



# Agrupa los datos por 'ck_cod_division' y 'descr1' y cuenta las ocurrencias
conteo_por_grupo = df.groupby(['ck_cod_grupo', 'descr1']).size().unstack(fill_value=0)

# Crea un gráfico de barras apiladas
conteo_por_grupo.plot(kind='bar', stacked=True, figsize=(12, 6))
plt.xlabel('Código de División')
plt.ylabel('Cantidad')
plt.title('Clasificación de Grupos por Código de División y Descripción')
plt.legend(title='Descripción', loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

grupos = df.groupby('descr1')

# Obtén la cantidad de elementos en cada grupo
conteo_por_grupo = grupos.size()

# Crea un gráfico de torta
plt.figure(figsize=(8, 8))
plt.pie(conteo_por_grupo, labels=conteo_por_grupo.index, autopct='%1.1f%%')
plt.title('Distribución de Cantidad por Descripción')
plt.axis('equal')  # Proporciona un círculo perfecto
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

df_primeras_500 = df.head(500)

# Elimina las filas duplicadas basadas en la columna 'Descripción' y toma solo una fila de cada descripción
df_sin_duplicados = df_primeras_500.drop_duplicates(subset='Descripción', keep='first')

# Agrupa los datos sin duplicados por 'Descripción' y suma las cantidades recibidas
resultados = df_sin_duplicados.groupby('Descripción').agg({'Cantidad esperada': 'first', 'Recibir cantidad': 'sum'}).reset_index()

# Crea un gráfico de barras
resultados.plot(kind='bar', x='Descripción', y=['Cantidad esperada', 'Recibir cantidad'], figsize=(12, 6))
plt.xlabel('Descripción')
plt.ylabel('Cantidad')
plt.title('Cantidad Esperada y Recibida por Descripción (Primeras 500 filas)')
plt.show()

# Toma solo las últimas 500 filas
df_ultimas_500 = df.tail(500)

# Elimina las filas duplicadas basadas en la columna 'Descripción' y toma solo una fila de cada descripción
df_sin_duplicados = df_ultimas_500.drop_duplicates(subset='Descripción', keep='first')

# Crea un gráfico de barras con etiquetas personalizadas para las descripciones
plt.figure(figsize=(12, 6))
plt.bar(range(len(df_sin_duplicados)), df_sin_duplicados['Desde ubicación'], tick_label=df_sin_duplicados['Descripción'])
plt.xlabel('Descripción')
plt.ylabel('Desde ubicación')
plt.title('Desde ubicación por Descripción (Últimas 500 filas)')
plt.xticks(rotation=90)  # Rotar etiquetas en el eje x para una mejor legibilidad
plt.show()