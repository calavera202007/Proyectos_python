# -*- coding: utf-8 -*-
"""Cuadrado Magico.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jxuCDzTjk656SbkBwjTgZ-T5570VBnew
"""

def resuelveCuadradoImpar(matriz, numeros):
    n = len(numeros)
    grado = int(math.sqrt(n))
    centro = grado // 2
    matriz[0][centro] = numeros[0]
    filaActual = 0
    columnaActual = centro

    for i in range(1, len(numeros)):
        arriba = filaActual - 1
        if arriba < 0:
            arriba = grado - 1

        derecha = columnaActual + 1
        if derecha > grado - 1:
            derecha = 0

        if matriz[arriba][derecha] == 0:
            filaActual = arriba
            columnaActual = derecha
        elif filaActual < grado - 1:
            filaActual += 1
        else:
            filaActual = 0

        matriz[filaActual][columnaActual] = numeros[i]

def marcaSeccionesHorizontales(matriz, numFilas, numColumnas, gradoCuadrado):
    columnaInicial = (gradoCuadrado - numColumnas) // 2
    columnaFinal = (numColumnas + columnaInicial) - 1

    # Pone -1 en todas las casillas que corresponderán a la sección superior
    for i in range(numFilas):
        for j in range(columnaInicial, columnaFinal + 1):
            matriz[i][j] = -1

    # Pone -1 en todas las casillas que corresponderán a la sección inferior
    for i in range(gradoCuadrado - numFilas, gradoCuadrado):
        for j in range(columnaInicial, columnaFinal + 1):
            matriz[i][j] = -1

def marcaSeccionesVerticales(matriz, numFilas, numColumnas, gradoCuadrado):
    filaInicial = (gradoCuadrado - numFilas) // 2
    filaFinal = (numFilas + filaInicial) - 1
    for i in range(filaInicial, filaFinal + 1):
        for j in range(numColumnas):
            matriz[i][j] = -1
    for i in range(filaInicial, filaFinal + 1):
        for j in range(gradoCuadrado - numColumnas, gradoCuadrado):
            matriz[i][j] = -1

import math
import os
import sys

def main():
    constanteMagica = 0
    numeroi = 0
    tipoCuadro = ""

    print("CUADRADO MAGICO\n")
    n = input("\nCuadrado mágico de nxn, introduzca el valor de n (0 para terminar o mayor a 2 para continuar): ")

    for numeroi in range(3):
        numeroi = int(n)
        if numeroi == 0:
            break

    if numeroi > 0:
        print(f"\nCuadrado mágico de {numeroi}x{numeroi}\n")

        cuadro = creaMatriz(numeroi)

        constanteMagica = (numeroi * ((numeroi * numeroi) + 1)) / 2

        if numeroi % 2 != 0:
            tipoCuadro = "IMPAR"
        elif numeroi % 2 == 0 and numeroi % 4 != 0:
            tipoCuadro = "PAR"
        elif numeroi % 4 == 0:
            tipoCuadro = "DOBLE PARIDAD"

        print(f"La constante mágica es {constanteMagica}")
        print(f"El cuadrado mágico es {tipoCuadro}")
        print("-" * 50)

        serie = generaSerie(numeroi * numeroi)

        if tipoCuadro == "IMPAR":
            resuelveCuadradoImpar(cuadro, serie)
        elif tipoCuadro == "PAR":
            gradoSecciones = numeroi // 2
            cantNumerosxSeccion = len(serie) // 4

            seccionA = creaMatriz(gradoSecciones)
            seccionB = creaMatriz(gradoSecciones)
            seccionC = creaMatriz(gradoSecciones)
            seccionD = creaMatriz(gradoSecciones)

            numerosSeccion = serie[:cantNumerosxSeccion]
            resuelveCuadradoImpar(seccionA, numerosSeccion)

            numerosSeccion = serie[cantNumerosxSeccion:(cantNumerosxSeccion * 2)]
            resuelveCuadradoImpar(seccionB, numerosSeccion)

            numerosSeccion = serie[(cantNumerosxSeccion * 2):(cantNumerosxSeccion * 3)]
            resuelveCuadradoImpar(seccionC, numerosSeccion)

            numerosSeccion = serie[(cantNumerosxSeccion * 3):(cantNumerosxSeccion * 4)]
            resuelveCuadradoImpar(seccionD, numerosSeccion)

            columnasPatron1 = gradoSecciones // 2
            columnasPatron2 = (gradoSecciones // 2) - 1
            temporal = 0
            for i in range(gradoSecciones):
                for j in range(columnasPatron1):
                    if i == gradoSecciones // 2:
                        temporal = seccionA[i][j + 1]
                        seccionA[i][j + 1] = seccionD[i][j + 1]
                        seccionD[i][j + 1] = temporal
                    else:
                        temporal = seccionA[i][j]
                        seccionA[i][j] = seccionD[i][j]
                        seccionD[i][j] = temporal
            if columnasPatron2 > 0:
                temporal = 0
                for i in range(gradoSecciones):
                    for j in range(gradoSecciones - 1, gradoSecciones - columnasPatron2 - 1, -1):
                        temporal = seccionC[i][j]
                        seccionC[i][j] = seccionB[i][j]
                        seccionB[i][j] = temporal
            for i in range(gradoSecciones):
                for j in range(gradoSecciones):
                    cuadro[i][j] = seccionA[i][j]
            for i in range(gradoSecciones, numeroi):
                for j in range(gradoSecciones, numeroi):
                    cuadro[i][j] = seccionB[i - gradoSecciones][j - gradoSecciones]
            for i in range(gradoSecciones):
                for j in range(gradoSecciones, numeroi):
                    cuadro[i][j] = seccionC[i][j - gradoSecciones]
            for i in range(gradoSecciones, numeroi):
                for j in range(gradoSecciones):
                    cuadro[i][j] = seccionD[i - gradoSecciones][j]
        elif tipoCuadro == "DOBLE PARIDAD":
            filasH = numeroi // 4
            columnasH = numeroi // 2
            marcaSeccionesHorizontales(cuadro, filasH, columnasH, numeroi)
            filasV = numeroi // 2
            columnasV = numeroi // 4
            marcaSeccionesVerticales(cuadro, filasV, columnasV, numeroi)
            elemento = 0
            for i in range(numeroi):
                for j in range(numeroi):
                    if cuadro[i][j] == -1:
                        cuadro[i][j] = serie[elemento]
                    elemento += 1
            elemento = (numeroi * numeroi) - 1
            for i in range(numeroi):
                for j in range(numeroi):
                    if cuadro[i][j] == 0:
                        cuadro[i][j] = serie[elemento]
                    elemento = elemento - 1

        imprimeMatriz(cuadro)

def creaMatriz(n):
    matriz = [[0] * n for _ in range(n)]
    return matriz

def generaSerie(elementos):
    arreglo = [i + 1 for i in range(elementos)]
    return arreglo

def imprimeMatriz(matriz):
    n = len(matriz[0])
    for i in range(n):
        for j in range(n):
            print(f"{matriz[i][j]:3d}", end=" ")
        print()
    print()

if __name__ == "__main__":
    main()