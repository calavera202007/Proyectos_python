# -*- coding: utf-8 -*-
"""mineriaDatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNqADFgK8Opn_74ZyBvyPB_3JWAzNX6j
"""

cantidad_publicidad = [24.0, 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, 16.5, 18.9, 15.0, 18.9, 21.7, 20.4, 18.2, 19.9, 23.1, 17.5, 20.2, 18.2, 13.6, 19.6, 15.2, 14.5, 15.6, 13.9, 16.6, 14.8, 18.4, 21.0, 12.7,
         14.5, 13.2, 13.1, 13.5, 18.9, 20.0, 21.0, 24.7, 30.8, 34.9, 26.6, 25.3, 24.7, 21.2, 19.3, 20.0, 16.6, 14.4, 19.4, 19.7, 20.5, 25.0, 23.4, 18.9, 35.4, 24.7, 31.6, 23.3, 19.6, 18.7, 16.0,
         22.2, 25.0, 33.0, 23.5, 19.4, 22.0, 17.4, 20.9, 24.2, 21.7, 22.8, 23.4, 24.1, 21.4, 20.0, 20.8, 21.2, 20.3, 28.0, 23.9, 24.8, 22.9, 23.9, 26.6, 22.5, 22.2, 23.6, 28.7, 22.6, 22.0, 22.9,
         25.0, 20.6, 28.4, 21.4, 38.7, 43.8, 33.2, 27.5, 26.5, 18.6, 19.3, 20.1, 19.5, 19.5, 20.4, 19.8, 19.4, 21.7, 22.8, 18.8, 18.7, 18.5, 18.3, 21.2, 19.2, 20.4, 19.3, 22.0, 20.3, 20.5, 17.3,
         18.8, 21.4, 15.7, 16.2, 18.0, 14.3, 19.2, 19.6, 23.0, 18.4, 15.6, 18.1, 17.4, 17.1, 13.3, 17.8, 14.0, 14.4, 13.4, 15.6, 11.8, 13.8, 15.6, 14.6, 17.8, 15.4, 21.5, 19.6, 15.3, 19.4, 17.0,
         15.6, 13.1, 41.3, 24.3, 23.3, 27.0, 50.0, 50.0, 50.0, 22.7, 25.0, 50.0, 23.8, 23.8, 22.3, 17.4, 19.1, 23.1, 23.6, 22.6, 29.4, 23.2, 24.6, 29.9, 37.2, 39.8, 36.2, 37.9, 32.5, 26.4, 29.6,
         50.0, 32.0, 29.8, 34.9, 37.0, 30.5, 36.4, 31.1, 29.1, 50.0, 33.3, 30.3, 34.6, 34.9, 32.9, 24.1, 42.3, 48.5, 50.0, 22.6, 24.4, 22.5, 24.4, 20.0, 21.7, 19.3, 22.4, 28.1, 23.7, 25.0, 23.3,
         28.7, 21.5, 23.0, 26.7, 21.7, 27.5, 30.1, 44.8, 50.0, 37.6, 31.6, 46.7, 31.5, 24.3, 31.7, 41.7, 48.3, 29.0, 24.0, 25.1, 31.5, 23.7, 23.3, 22.0, 20.1, 22.2, 23.7, 17.6, 18.5, 24.3, 20.5,
         24.5, 26.2, 24.4, 24.8, 29.6, 42.8, 21.9, 20.9, 44.0, 50.0, 36.0, 30.1, 33.8, 43.1, 48.8, 31.0, 36.5, 22.8, 30.7, 50.0, 43.5, 20.7, 21.1, 25.2, 24.4, 35.2, 32.4, 32.0, 33.2, 33.1, 29.1,
         35.1, 45.4, 35.4, 46.0, 50.0, 32.2, 22.0, 20.1, 23.2, 22.3, 24.8, 28.5, 37.3, 27.9, 23.9, 21.7, 28.6, 27.1, 20.3, 22.5, 29.0, 24.8, 22.0, 26.4, 33.1, 36.1, 28.4, 33.4, 28.2, 22.8, 20.3,
         16.1, 22.1, 19.4, 21.6, 23.8, 16.2, 17.8, 19.8, 23.1, 21.0, 23.8, 23.1, 20.4, 18.5, 25.0, 24.6, 23.0, 22.2, 19.3, 22.6, 19.8, 17.1, 19.4, 22.2, 20.7, 21.1, 19.5, 18.5, 20.6, 19.0, 18.7,
         32.7, 16.5, 23.9, 31.2, 17.5, 17.2, 23.1, 24.5, 26.6, 22.9, 24.1, 18.6, 30.1, 18.2, 20.6, 17.8, 21.7, 22.7, 22.6, 25.0, 19.9, 20.8, 16.8, 21.9, 27.5, 21.9, 23.1, 50.0, 50.0, 50.0, 50.0,
         50.0, 13.8, 13.8, 15.0, 13.9, 13.3, 13.1, 10.2, 10.4, 10.9, 11.3, 12.3, 8.8, 7.2, 10.5, 7.4, 10.2, 11.5, 15.1, 23.2, 9.7, 13.8, 12.7, 13.1, 12.5, 8.5, 5.0, 6.3, 5.6, 7.2, 12.1, 8.3, 8.5,
         5.0, 11.9, 27.9, 17.2, 27.5, 15.0, 17.2, 17.9, 16.3, 7.0, 7.2, 7.5, 10.4, 8.8, 8.4, 16.7, 14.2, 20.8, 13.4, 11.7, 8.3, 10.2, 10.9, 11.0, 9.5, 14.5, 14.1, 16.1, 14.3, 11.7, 13.4, 9.6, 8.7,
         8.4, 12.8, 10.5, 17.1, 18.4, 15.4, 10.8, 11.8, 14.9, 12.6, 14.1, 13.0, 13.4, 15.2, 16.1, 17.8, 14.9, 14.1, 12.7, 13.5, 14.9, 20.0, 16.4, 17.7, 19.5, 20.2, 21.4, 19.9, 19.0, 19.1, 19.1, 20.1,
         19.9, 19.6, 23.2, 29.8, 13.8, 13.3, 16.7, 12.0, 14.6, 21.4, 23.0, 23.7, 25.0, 21.8, 20.6, 21.2, 19.1, 20.6, 15.2, 7.0, 8.1, 13.6, 20.1, 21.8, 24.5, 23.1, 19.7, 18.3, 21.2, 17.5, 16.8, 22.4,
         20.6, 23.9, 22.0, 11.9]


numero_visitantes = [11.575, 11.421, 12.184999999999999, 11.998000000000001, 12.147, 11.43, 11.012, 11.172, 10.631, 11.004, 11.376999999999999, 11.009, 10.889, 10.949, 11.096, 10.834, 10.934999999999999, 10.99, 10.456, 10.727, 10.57, 10.965, 11.142, 10.812999999999999, 10.924, 10.599, 10.812999999999999, 11.047, 11.495000000000001, 11.674, 10.713000000000001, 11.072, 10.95, 10.701, 11.096, 10.933, 10.841000000000001, 10.85, 10.966000000000001, 11.594999999999999, 12.024000000000001, 11.77, 11.169, 11.211, 11.068999999999999, 10.682, 10.786, 11.030000000000001, 10.399000000000001, 10.602, 10.963000000000001, 11.115, 11.511, 10.998000000000001, 10.888, 12.248999999999999, 11.383, 11.815999999999999, 11.145, 10.927, 10.741, 10.966000000000001, 11.456, 11.762, 12.104, 11.29, 10.786999999999999, 10.878, 10.594000000000001, 10.885, 11.417, 10.961, 11.065000000000001, 11.245000000000001, 11.273, 11.286, 11.279, 11.14, 11.232, 10.873999999999999, 11.727, 11.619, 11.302, 11.167, 11.389, 11.629999999999999, 11.015, 11.121, 12.007, 12.079, 11.417, 11.405000000000001, 11.442, 11.211, 11.248999999999999, 11.625, 11.163, 13.069, 12.82, 12.416, 11.727, 11.780999999999999, 11.405000000000001, 11.137, 11.167, 10.850999999999999, 10.836, 11.126999999999999, 11.474, 11.229, 11.195, 11.715, 10.913, 11.091999999999999, 11.254, 10.928, 11.176, 11.021, 10.872, 10.731, 10.870000000000001, 11.004, 10.961, 10.856, 10.879, 10.986, 10.613, 10.693, 11.431000000000001, 10.637, 11.458, 11.326, 11.372, 10.822, 10.757, 11.335, 10.942, 11.454, 10.857, 11.151, 11.174, 10.019, 10.402999999999999, 10.468, 9.902999999999999, 11.129999999999999, 10.628, 9.926, 10.186, 10.597000000000001, 11.122, 10.404, 10.012, 10.709, 11.129, 11.152000000000001, 10.272, 11.943, 11.065999999999999, 11.51, 11.25, 12.489, 12.802, 13.375, 10.854, 11.100999999999999, 12.929, 10.876999999999999, 11.318999999999999, 11.402000000000001, 10.875, 10.879999999999999, 10.572, 11.416, 10.859, 11.546, 11.02, 11.315000000000001, 11.86, 11.98, 12.765, 11.144, 12.155000000000001, 11.562999999999999, 10.604, 11.152999999999999, 12.831, 11.782, 11.556000000000001, 12.184999999999999, 11.951, 11.739, 12.178, 11.8, 11.604, 12.875, 12.286999999999999, 12.107, 12.274000000000001, 11.975, 12.135, 11.161999999999999, 12.61, 12.853, 13.034, 10.891, 11.326, 10.783000000000001, 11.064, 10.344000000000001, 10.96, 10.404, 10.807, 11.375, 10.411999999999999, 11.182, 10.888, 11.642, 10.951, 11.373000000000001, 11.951, 11.164, 11.879, 11.618, 13.266, 13.725, 13.04, 12.163, 12.686, 11.552, 10.981, 12.411999999999999, 13.337, 13.247, 11.725999999999999, 11.086, 11.631, 12.358, 11.481, 11.606, 11.897, 11.094999999999999, 11.358, 11.393, 10.593, 10.605, 11.108, 11.225999999999999, 11.433, 11.718, 11.487, 11.437999999999999, 11.957, 13.259, 11.108, 10.876000000000001, 12.454, 13.704, 12.333, 11.841999999999999, 12.203, 12.52, 13.398, 12.327, 12.206, 10.559999999999999, 12.014, 13.297, 12.469999999999999, 10.92, 10.856, 11.24, 11.538, 12.690999999999999, 11.758, 11.854, 12.267, 11.826, 11.482, 11.812000000000001, 12.82, 11.968, 12.645, 12.923, 12.088000000000001, 11.453, 11.23, 11.209, 11.315000000000001, 11.565000000000001, 11.861, 12.148, 11.629999999999999, 11.126999999999999, 11.009, 11.678, 11.549, 10.79, 11.344999999999999, 12.041, 11.871, 11.59, 11.495000000000001, 11.982, 12.236, 11.616, 12.42, 11.849, 11.635, 10.972000000000001, 9.972999999999999, 11.122, 11.023, 11.266, 11.567, 10.705, 10.914, 10.782, 11.382, 11.113, 11.426, 11.376000000000001, 11.041, 10.708, 11.415, 11.431000000000001, 11.312000000000001, 11.083, 10.868, 11.333, 11.144, 10.706, 11.030999999999999, 11.315999999999999, 11.309999999999999, 11.036999999999999, 10.869, 10.895, 11.059000000000001, 10.985, 10.968, 12.241, 11.54, 11.696, 11.873999999999999, 11.014, 10.898, 11.516, 11.635, 11.939, 11.49, 11.579, 10.884, 11.728, 10.663, 10.936, 11.212, 11.395, 11.126999999999999, 11.112, 11.398, 11.251000000000001, 10.362, 10.803, 13.78, 8.561, 9.963000000000001, 8.863, 9.969999999999999, 11.683, 12.016, 11.216000000000001, 10.875, 9.905999999999999, 9.138, 12.312999999999999, 11.649000000000001, 11.794, 11.379999999999999, 11.222999999999999, 11.968, 11.545, 10.536, 10.52, 9.368, 10.277000000000001, 9.652000000000001, 10.0, 9.879999999999999, 10.39, 10.713000000000001, 11.051, 10.036, 11.193, 10.887, 11.471, 11.405000000000001, 10.747, 10.453, 10.852, 10.987, 11.343, 11.404, 10.349, 10.530999999999999, 10.683, 9.138, 10.608, 10.617, 11.852, 10.757, 11.657, 9.628, 10.155000000000001, 9.519, 11.434000000000001, 11.782, 10.304, 10.957, 11.824, 11.411, 11.006, 10.648, 11.103, 10.565000000000001, 10.896, 10.837, 11.202, 11.193, 11.379999999999999, 11.347999999999999, 11.833, 11.425, 11.436, 11.208, 11.629, 11.461, 11.152000000000001, 10.934999999999999, 10.626999999999999, 10.818, 11.405999999999999, 11.219000000000001, 11.485, 10.854, 11.459, 11.341000000000001, 11.251000000000001, 11.184999999999999, 11.417, 11.748999999999999, 11.655000000000001, 11.297, 12.393, 11.728, 11.525, 10.975999999999999, 10.936, 11.301, 11.081, 11.701, 11.376000000000001, 11.317, 11.513, 11.209, 10.759, 10.952, 11.003, 10.926, 10.713000000000001, 11.167, 11.229, 11.437000000000001, 11.98, 10.427, 11.161999999999999, 11.484, 10.304, 11.184999999999999, 11.229, 11.242, 11.75, 12.061, 10.762, 10.871, 11.312000000000001, 11.114, 10.905000000000001, 10.454, 10.414, 10.093, 10.983, 10.983, 10.707, 10.926, 10.67, 10.39, 10.794, 11.019, 10.568999999999999, 11.027000000000001, 11.593, 11.120000000000001, 11.975999999999999, 11.794, 11.030000000000001]

import matplotlib.pyplot as plt
import numpy as np
# Crea el diagrama con los ejes en dos dimensiones
fig, ax = plt.subplots()

# Seleccionar los puntos que se dibujaran:
ax.scatter(x=cantidad_publicidad, y=numero_visitantes, color="blue")

# Poner título al eje X
plt.gca().set_xlabel("Cantidad de publicidad en redes sociales por hora")

# Poner título al eje Y
plt.gca().set_ylabel("Numero de visitantes en el sitio web")

plt.show()

def hipotesis(w0, w1, x):
  return w0 + w1 * x


def error(w0, w1, x, y):
  return hipotesis(w0, w1, x) - y

def calcular_delta_w0(w0, w1, X, Y, alfa=0.001):
  nro_muestras = len(X)
  sumatoria = 0
  indice = 0
  for muestra in X:
    error_muestra = error(w0, w1, muestra, Y[indice])
    sumatoria += error_muestra
    indice += 1

  sumatoria = (sumatoria / nro_muestras) * alfa

  return sumatoria

def calcular_delta_w1(w0, w1, X, Y, alfa=0.001):
  nro_muestras = len(X)
  sumatoria = 0
  indice = 0
  for muestra in X:
    error_muestra = error(w0, w1, muestra, Y[indice])
    sumatoria += (error_muestra * muestra)
    indice += 1

  sumatoria = (sumatoria / nro_muestras) * alfa

  return sumatoria

w0 = 45.0
w1 = 2.9

for epoc in range(500):
  nuevo_w0 = w0 - calcular_delta_w0(w0, w1, cantidad_publicidad, numero_visitantes)
  nuevo_w1 = w1 - calcular_delta_w1(w0, w1, cantidad_publicidad, numero_visitantes)

  w0 = nuevo_w0
  w1 = nuevo_w1


print(f"valor predicho = {hipotesis(w0, w1, cantidad_publicidad[0])} y el valor real es {numero_visitantes[0]}")