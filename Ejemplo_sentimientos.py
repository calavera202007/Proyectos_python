# -*- coding: utf-8 -*-
"""sentimientos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nWzpMVc-Phqdv5Ilegb2BiMV9FlmId63
"""

import csv

#archivo CSV hay que subir
archivo_csv = '/content/dataset.csv'


datos_modificados = []

with open(archivo_csv, 'r') as archivo:
    lector_csv = csv.reader(archivo, delimiter=';')
    next(lector_csv)  # Omitir la primera fila (encabezado)
    for fila in lector_csv:
        if len(fila) >= 3:  # Deben haber al menos 3 valores en la fila
            nombre_pelicula, genero, puntaje_comentario = fila[:3]
            if puntaje_comentario.isdigit():  # Verifica si el valor es un número
                puntaje_comentario = int(puntaje_comentario)
                # Aplica la modificación de acuerdo a los rangos
                if puntaje_comentario >= 1 and puntaje_comentario <= 2:
                    puntaje_comentario = 1
                elif puntaje_comentario == 3:
                    puntaje_comentario = 2
                elif puntaje_comentario >= 4 and puntaje_comentario <= 5:
                    puntaje_comentario = 3
                elif puntaje_comentario == 6:
                    puntaje_comentario = 4
                elif puntaje_comentario >= 7 and puntaje_comentario <= 8:
                    puntaje_comentario = 5
                elif puntaje_comentario == 9:
                    puntaje_comentario = 6
                elif puntaje_comentario == 10:
                    puntaje_comentario = 7
            # Agrega los datos modificados a la lista
            datos_modificados.append([nombre_pelicula, genero, puntaje_comentario])
# Imprime los datos modificados
print(datos_modificados)

import random

# Datos de entrenamiento
datos = datos_modificados

# Porcentaje de datos a usar como prueba (20%)
porcentaje_prueba = 0.2

# Division de los datos en datos de entrenamiento y datos de prueba
random.shuffle(datos)  # Mezcla aleatoria
total_ejemplos = len(datos)
limite = int(total_ejemplos * porcentaje_prueba)

datos_entrenamiento = datos[:-limite]
datos_prueba = datos[-limite:]

# Definir las clases de sentimientos
clases = ["pésimo", "malo", "regular", "aceptable", "bueno", "muy bueno", "excelente"]

# Probabilidades previas
probabilidades_previas = {clase: 0 for clase in clases}

total_ejemplos_entrenamiento = len(datos_entrenamiento)
for _, _, puntaje in datos_entrenamiento:
    clase = clases[puntaje - 1] if 1 <= puntaje <= 7 else "fuera de rango"
    if clase != "fuera de rango":
        probabilidades_previas[clase] += 1 / total_ejemplos_entrenamiento

# Probabilidades condicionales
probabilidades_condicionales = {clase: [0] * 7 for clase in clases}
for _, _, puntaje in datos_entrenamiento:
    for i, clase in enumerate(clases):
        ejemplos_con_puntaje = [(_, _, p) for _, _, p in datos_entrenamiento if p == i + 1 and clase == clases[i]]
        if ejemplos_con_puntaje:
            prob = len(ejemplos_con_puntaje) / total_ejemplos_entrenamiento
            probabilidades_condicionales[clase][i] = prob

# Conjunto de prueba y clasificación
for nombre_pelicula, genero, puntaje_a_clasificar in datos_prueba:
    # Calcular las probabilidades
    probabilidades = {clase: probabilidades_previas[clase] * probabilidades_condicionales[clase][puntaje_a_clasificar - 1] for clase in clases}

    # Selecciona la clase con la probabilidad más alta
    clase_predicha = max(probabilidades, key=probabilidades.get)

    # Imprimir el resultado y el nombre de la película
    print(f"La película {nombre_pelicula} tiene un puntaje {puntaje_a_clasificar} y se clasifica como {clase_predicha}")

# Inicializa una variable para contar las clasificaciones correctas
clasificaciones_correctas = 0

# Recorre los datos de prueba y realiza las clasificaciones
for nombre_pelicula, genero, puntaje_real in datos_prueba:
    # Calcular las probabilidades
    probabilidades = {clase: probabilidades_previas[clase] * probabilidades_condicionales[clase][puntaje_real - 1] for clase in clases}

    # Selecciona la clase con la probabilidad más alta
    clase_predicha = max(probabilidades, key=probabilidades.get)

    # Compara la clase predicha con la clase real y cuenta si es correcta
    if clase_predicha == clases[puntaje_real - 1]:
        clasificaciones_correctas += 1

# Calcula la exactitud
exactitud = clasificaciones_correctas / len(datos_prueba)

# Imprime la exactitud
print(f"Exactitud del modelo: {exactitud * 100:.2f}%")

